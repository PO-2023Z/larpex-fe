/**
 * Generated by orval v6.21.0 üç∫
 * Do not edit manually.
 * LarpexAPI
 * OpenAPI spec version: v1
 */
import { customInstance } from './axios-instance';
export type GetReviewerGamesGetSuggestionDetailsParams = {
GameId?: string;
};

export type GetReviewerGamesGetSuggestionsParams = {
GameName?: string;
SortExpression?: SortExpression;
PageSize?: number;
PageNumber?: number;
};

export type PostPaymentsConfirmPaymentIdParams = {
success?: string;
};

export type PostPaymentsInitParams = {
eventId?: string;
};

export type GetAuthParams = {
email?: string;
};

export type Verdict = typeof Verdict[keyof typeof Verdict];


 
export const Verdict = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;

export interface UpdateGameDto {
  description?: string | null;
  difficulty?: number;
  gameId?: string | null;
  gameName?: string | null;
  mapUrl?: string | null;
  maximumPlayers?: number;
  scenario?: string | null;
}

export interface UpdateEventSettingsResponse {
  eventSettings?: EventSettingsDTO;
}

export interface UpdateEventSettingsRequest {
  eventSettings?: EventSettingsDTO;
}

export interface UpdateEventResponse {
  event?: EventDTO;
}

export interface UpdateEventDTO {
  clientDescription?: string | null;
  currentlySignedPlayers?: number | null;
  employeeDescription?: string | null;
  endDate?: string | null;
  eventStatus?: string | null;
  name?: string | null;
  pricePerUser?: number | null;
  startDate?: string | null;
}

export interface UpdateEventRequest {
  event?: UpdateEventDTO;
}

export type SortExpression = typeof SortExpression[keyof typeof SortExpression];


 
export const SortExpression = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;

export interface SendGameSuggestionRequest {
  gameId?: string;
}

export interface PaymentStatusResponse {
  status?: string | null;
}

export interface NewGameDto {
  description?: string | null;
  difficulty?: number;
  gameName?: string | null;
  mapUrl?: string | null;
  maximumPlayers?: number;
  scenario?: string | null;
}

export interface ModifyGameRequest {
  game?: UpdateGameDto;
}

export interface InitPayResponse {
  paymentId?: string;
  paymentPrice?: number;
}

export interface GiveVerdictRequest {
  explanation?: string | null;
  gameId?: string;
  verdict?: Verdict;
}

export interface GetGameSuggestionDetailsResponse {
  difficulty?: number;
  gameDescription?: string | null;
  gameName?: string | null;
  gameScenario?: string | null;
  id?: string;
  mapURL?: string | null;
  maximumNumberOfPlayers?: number;
}

export interface GameSuggestionDTO {
  dateOfCreation?: string;
  gameName?: string | null;
  id?: string;
}

export type EventStatus = typeof EventStatus[keyof typeof EventStatus];


 
export const EventStatus = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

export interface EventSettingsDTO {
  isExternalOrganiser?: boolean | null;
  isVisible?: boolean | null;
  maxPlayerLimit?: number | null;
}

export interface EventDTO {
  currentlySignedPlayers?: number | null;
  descriptionForClient?: string | null;
  descriptionForEmployee?: string | null;
  endDate?: string;
  eventPrice?: number;
  eventSettings?: EventSettingsDTO;
  eventStatus?: string | null;
  game?: string;
  id?: string | null;
  location?: string;
  name?: string | null;
  ownerEmail?: string | null;
  pricePerUser?: number;
  startDate?: string;
}

export interface ReadEventResponse {
  event?: EventDTO;
}

export interface GetEventsResponse {
  events?: EventDTO[] | null;
}

export interface CreateTransactionResponse {
  redirectUrl?: string | null;
}

export interface CreateTransactionRequest {
  method?: string | null;
  paymentId?: string;
}

export interface CreateGameRequest {
  game?: NewGameDto;
}

export interface CreateEventResponse {
  event?: EventDTO;
}

export interface CreateEventDTO {
  clientDescription?: string | null;
  currentlySignedPlayers?: number | null;
  employeeDescription?: string | null;
  endDate?: string;
  game?: string;
  location?: string;
  name?: string | null;
  pricePerUser?: number;
  startDate?: string;
}

export interface CreateEventRequest {
  event?: CreateEventDTO;
  eventSettings?: EventSettingsDTO;
}

export interface BrowseGamesSuggestionResponse {
  itemFrom?: number;
  items?: GameSuggestionDTO[] | null;
  itemTo?: number;
  totalItemsCount?: number;
  totalPages?: number;
}

export interface AddCorrectionRequest {
  gameId?: string;
  message?: string | null;
}




// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;


  export const getAuth = (
    params?: GetAuthParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/Auth`, method: 'GET',
        params
    },
      options);
    }
  
export const getCreatorGames = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/CreatorGames`, method: 'GET'
    },
      options);
    }
  
export const postCreatorGames = (
    sendGameSuggestionRequest: SendGameSuggestionRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/CreatorGames`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sendGameSuggestionRequest
    },
      options);
    }
  
export const getCreatorGamesGameId = (
    gameId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/CreatorGames/${gameId}`, method: 'GET'
    },
      options);
    }
  
export const postCreatorGamesCreate = (
    createGameRequest: CreateGameRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/CreatorGames/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createGameRequest
    },
      options);
    }
  
export const postCreatorGamesModify = (
    modifyGameRequest: ModifyGameRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/CreatorGames/modify`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modifyGameRequest
    },
      options);
    }
  
export const getEventsInternalEmployee = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetEventsResponse>(
      {url: `/EventsInternalEmployee`, method: 'GET'
    },
      options);
    }
  
export const getEventsInternalEmployeeStatusStatus = (
    status: EventStatus,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetEventsResponse>(
      {url: `/EventsInternalEmployee/status/${status}`, method: 'GET'
    },
      options);
    }
  
export const getEventsInternalEmployeeEmailOwnerEmail = (
    ownerEmail: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetEventsResponse>(
      {url: `/EventsInternalEmployee/email/${ownerEmail}`, method: 'GET'
    },
      options);
    }
  
export const getEventsInternalOrganiser = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetEventsResponse>(
      {url: `/EventsInternalOrganiser`, method: 'GET'
    },
      options);
    }
  
export const postEventsInternalOrganiser = (
    createEventRequest: CreateEventRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateEventResponse>(
      {url: `/EventsInternalOrganiser`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createEventRequest
    },
      options);
    }
  
export const getEventsInternalOrganiserEventId = (
    eventId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ReadEventResponse>(
      {url: `/EventsInternalOrganiser/${eventId}`, method: 'GET'
    },
      options);
    }
  
export const putEventsInternalOrganiserEventId = (
    eventId: string,
    updateEventRequest: UpdateEventRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateEventResponse>(
      {url: `/EventsInternalOrganiser/${eventId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateEventRequest
    },
      options);
    }
  
export const deleteEventsInternalOrganiserEventId = (
    eventId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/EventsInternalOrganiser/${eventId}`, method: 'DELETE'
    },
      options);
    }
  
export const putEventsInternalOrganiserSettingsEventId = (
    eventId: string,
    updateEventSettingsRequest: UpdateEventSettingsRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateEventSettingsResponse>(
      {url: `/EventsInternalOrganiser/settings/${eventId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateEventSettingsRequest
    },
      options);
    }
  
export const postPaymentsInit = (
    params?: PostPaymentsInitParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<InitPayResponse>(
      {url: `/Payments/init`, method: 'POST',
        params
    },
      options);
    }
  
export const postPaymentsCreateTransaction = (
    createTransactionRequest: CreateTransactionRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateTransactionResponse>(
      {url: `/Payments/create-transaction`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createTransactionRequest
    },
      options);
    }
  
export const postPaymentsConfirmPaymentId = (
    paymentId: string,
    params?: PostPaymentsConfirmPaymentIdParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/Payments/confirm/${paymentId}`, method: 'POST',
        params
    },
      options);
    }
  
export const getPaymentsPaymentId = (
    paymentId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PaymentStatusResponse>(
      {url: `/Payments/${paymentId}`, method: 'GET'
    },
      options);
    }
  
export const getReviewerGamesGetSuggestions = (
    params?: GetReviewerGamesGetSuggestionsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<BrowseGamesSuggestionResponse>(
      {url: `/ReviewerGames/get-suggestions`, method: 'GET',
        params
    },
      options);
    }
  
export const getReviewerGamesGetSuggestionDetails = (
    params?: GetReviewerGamesGetSuggestionDetailsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetGameSuggestionDetailsResponse>(
      {url: `/ReviewerGames/get-suggestion-details`, method: 'GET',
        params
    },
      options);
    }
  
export const postReviewerGamesGiveVerdict = (
    giveVerdictRequest: GiveVerdictRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/ReviewerGames/give-verdict`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: giveVerdictRequest
    },
      options);
    }
  
export const postReviewerGamesAddCorrection = (
    addCorrectionRequest: AddCorrectionRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/ReviewerGames/add-correction`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addCorrectionRequest
    },
      options);
    }
  
export type GetAuthResult = NonNullable<Awaited<ReturnType<typeof getAuth>>>
export type GetCreatorGamesResult = NonNullable<Awaited<ReturnType<typeof getCreatorGames>>>
export type PostCreatorGamesResult = NonNullable<Awaited<ReturnType<typeof postCreatorGames>>>
export type GetCreatorGamesGameIdResult = NonNullable<Awaited<ReturnType<typeof getCreatorGamesGameId>>>
export type PostCreatorGamesCreateResult = NonNullable<Awaited<ReturnType<typeof postCreatorGamesCreate>>>
export type PostCreatorGamesModifyResult = NonNullable<Awaited<ReturnType<typeof postCreatorGamesModify>>>
export type GetEventsInternalEmployeeResult = NonNullable<Awaited<ReturnType<typeof getEventsInternalEmployee>>>
export type GetEventsInternalEmployeeStatusStatusResult = NonNullable<Awaited<ReturnType<typeof getEventsInternalEmployeeStatusStatus>>>
export type GetEventsInternalEmployeeEmailOwnerEmailResult = NonNullable<Awaited<ReturnType<typeof getEventsInternalEmployeeEmailOwnerEmail>>>
export type GetEventsInternalOrganiserResult = NonNullable<Awaited<ReturnType<typeof getEventsInternalOrganiser>>>
export type PostEventsInternalOrganiserResult = NonNullable<Awaited<ReturnType<typeof postEventsInternalOrganiser>>>
export type GetEventsInternalOrganiserEventIdResult = NonNullable<Awaited<ReturnType<typeof getEventsInternalOrganiserEventId>>>
export type PutEventsInternalOrganiserEventIdResult = NonNullable<Awaited<ReturnType<typeof putEventsInternalOrganiserEventId>>>
export type DeleteEventsInternalOrganiserEventIdResult = NonNullable<Awaited<ReturnType<typeof deleteEventsInternalOrganiserEventId>>>
export type PutEventsInternalOrganiserSettingsEventIdResult = NonNullable<Awaited<ReturnType<typeof putEventsInternalOrganiserSettingsEventId>>>
export type PostPaymentsInitResult = NonNullable<Awaited<ReturnType<typeof postPaymentsInit>>>
export type PostPaymentsCreateTransactionResult = NonNullable<Awaited<ReturnType<typeof postPaymentsCreateTransaction>>>
export type PostPaymentsConfirmPaymentIdResult = NonNullable<Awaited<ReturnType<typeof postPaymentsConfirmPaymentId>>>
export type GetPaymentsPaymentIdResult = NonNullable<Awaited<ReturnType<typeof getPaymentsPaymentId>>>
export type GetReviewerGamesGetSuggestionsResult = NonNullable<Awaited<ReturnType<typeof getReviewerGamesGetSuggestions>>>
export type GetReviewerGamesGetSuggestionDetailsResult = NonNullable<Awaited<ReturnType<typeof getReviewerGamesGetSuggestionDetails>>>
export type PostReviewerGamesGiveVerdictResult = NonNullable<Awaited<ReturnType<typeof postReviewerGamesGiveVerdict>>>
export type PostReviewerGamesAddCorrectionResult = NonNullable<Awaited<ReturnType<typeof postReviewerGamesAddCorrection>>>
