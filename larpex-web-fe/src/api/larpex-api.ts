/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * larpex-api-gateway
 * OpenAPI spec version: 1.0
 */
import { customInstance } from './axios-instance';
export type PostPaymentsConfirmPaymentIdParams = {
status?: string;
};

export type PostPaymentsInitParams = {
eventId?: string;
};

export type GetEventsInternalEmployeeEventStatusParams = {
status?: EventStatus;
};

export type GetAuthParams = {
email?: string;
};

export interface UpdateEventSettingsResponse {
  eventSettings?: EventSettingsDTO;
}

export interface UpdateEventSettingsRequest {
  eventSettings?: EventSettingsDTO;
}

export interface UpdateEventDTO {
  clientDescription?: string | null;
  currentlySignedPlayers?: number | null;
  employeeDescription?: string | null;
  eventDate?: string | null;
  maxPlayers?: number | null;
  name?: string | null;
}

export interface UpdateEventRequest {
  event?: UpdateEventDTO;
  eventSettings?: EventSettingsDTO;
}

export interface InitPayResponse {
  paymentId?: string;
  paymentPrice?: number;
}

export interface GetEventsResponse {
  events?: EventDTO[] | null;
}

export type EventStatus = typeof EventStatus[keyof typeof EventStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventStatus = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

export interface EventSettingsDTO {
  isExternalOrganiser?: boolean | null;
  isVisible?: boolean | null;
  maxPlayerLimit?: number | null;
}

export interface EventDTO {
  currentlySignedPlayers?: number | null;
  date?: string | null;
  descriptionForClient?: string | null;
  descriptionForEmployee?: string | null;
  id?: string | null;
  location?: string;
  maxPlayers?: number | null;
  name?: string | null;
  price?: number;
}

export interface UpdateEventResponse {
  event?: EventDTO;
}

export interface ReadEventResponse {
  event?: EventDTO;
}

export interface CreateTransactionRequest {
  method?: string | null;
  paymentId?: string;
}

export interface CreateEventResponse {
  event?: EventDTO;
}

export interface CreateEventDTO {
  clientDescription?: string | null;
  currentlySignedPlayers?: number | null;
  employeeDescription?: string | null;
  eventDate?: string;
  game?: string;
  location?: string;
  maxPlayers?: number | null;
  name?: string | null;
  price?: number;
}

export interface CreateEventRequest {
  event?: CreateEventDTO;
  eventSettings?: EventSettingsDTO;
}




// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;


  export const getAuth = (
    params?: GetAuthParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/Auth`, method: 'get',
        params
    },
      options);
    }
  
export const getEventsInternalEmployee = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetEventsResponse>(
      {url: `/EventsInternalEmployee`, method: 'get'
    },
      options);
    }
  
export const getEventsInternalEmployeeEventStatus = (
    eventStatus: string,
    params?: GetEventsInternalEmployeeEventStatusParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetEventsResponse>(
      {url: `/EventsInternalEmployee/${eventStatus}`, method: 'get',
        params
    },
      options);
    }
  
export const getEventsInternalEmployeeOwnerEmail = (
    ownerEmail: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetEventsResponse>(
      {url: `/EventsInternalEmployee/${ownerEmail}`, method: 'get'
    },
      options);
    }
  
export const getEventsInternalOrganiser = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetEventsResponse>(
      {url: `/EventsInternalOrganiser`, method: 'get'
    },
      options);
    }
  
export const postEventsInternalOrganiser = (
    createEventRequest: CreateEventRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateEventResponse>(
      {url: `/EventsInternalOrganiser`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createEventRequest
    },
      options);
    }
  
export const getEventsInternalOrganiserEventId = (
    eventId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ReadEventResponse>(
      {url: `/EventsInternalOrganiser/${eventId}`, method: 'get'
    },
      options);
    }
  
export const putEventsInternalOrganiserEventId = (
    eventId: string,
    updateEventRequest: UpdateEventRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateEventResponse>(
      {url: `/EventsInternalOrganiser/${eventId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateEventRequest
    },
      options);
    }
  
export const deleteEventsInternalOrganiserEventId = (
    eventId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/EventsInternalOrganiser/${eventId}`, method: 'delete'
    },
      options);
    }
  
export const putEventsInternalOrganiserSettingsEventId = (
    eventId: string,
    updateEventSettingsRequest: UpdateEventSettingsRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateEventSettingsResponse>(
      {url: `/EventsInternalOrganiser/settings/${eventId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: updateEventSettingsRequest
    },
      options);
    }
  
export const postPaymentsInit = (
    params?: PostPaymentsInitParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<InitPayResponse>(
      {url: `/Payments/init`, method: 'post',
        params
    },
      options);
    }
  
export const postPaymentsCreateTransaction = (
    createTransactionRequest: CreateTransactionRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<string>(
      {url: `/Payments/create-transaction`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createTransactionRequest
    },
      options);
    }
  
export const postPaymentsConfirmPaymentId = (
    paymentId: string,
    params?: PostPaymentsConfirmPaymentIdParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/Payments/confirm/${paymentId}`, method: 'post',
        params
    },
      options);
    }
  
export const getPaymentsPaymentId = (
    paymentId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<string>(
      {url: `/Payments/${paymentId}`, method: 'get'
    },
      options);
    }
  
export type GetAuthResult = NonNullable<Awaited<ReturnType<typeof getAuth>>>
export type GetEventsInternalEmployeeResult = NonNullable<Awaited<ReturnType<typeof getEventsInternalEmployee>>>
export type GetEventsInternalEmployeeEventStatusResult = NonNullable<Awaited<ReturnType<typeof getEventsInternalEmployeeEventStatus>>>
export type GetEventsInternalEmployeeOwnerEmailResult = NonNullable<Awaited<ReturnType<typeof getEventsInternalEmployeeOwnerEmail>>>
export type GetEventsInternalOrganiserResult = NonNullable<Awaited<ReturnType<typeof getEventsInternalOrganiser>>>
export type PostEventsInternalOrganiserResult = NonNullable<Awaited<ReturnType<typeof postEventsInternalOrganiser>>>
export type GetEventsInternalOrganiserEventIdResult = NonNullable<Awaited<ReturnType<typeof getEventsInternalOrganiserEventId>>>
export type PutEventsInternalOrganiserEventIdResult = NonNullable<Awaited<ReturnType<typeof putEventsInternalOrganiserEventId>>>
export type DeleteEventsInternalOrganiserEventIdResult = NonNullable<Awaited<ReturnType<typeof deleteEventsInternalOrganiserEventId>>>
export type PutEventsInternalOrganiserSettingsEventIdResult = NonNullable<Awaited<ReturnType<typeof putEventsInternalOrganiserSettingsEventId>>>
export type PostPaymentsInitResult = NonNullable<Awaited<ReturnType<typeof postPaymentsInit>>>
export type PostPaymentsCreateTransactionResult = NonNullable<Awaited<ReturnType<typeof postPaymentsCreateTransaction>>>
export type PostPaymentsConfirmPaymentIdResult = NonNullable<Awaited<ReturnType<typeof postPaymentsConfirmPaymentId>>>
export type GetPaymentsPaymentIdResult = NonNullable<Awaited<ReturnType<typeof getPaymentsPaymentId>>>
